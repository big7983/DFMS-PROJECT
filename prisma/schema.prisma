// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//------------------------Model------------------------

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  employee_id String @unique
  email String  @unique
  name String?
  rank String
  position String
  department String
  role String
}

model Training_Form {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  idform String @unique
  name String
  datesubmiss String
  requester_id String @unique
  requester Requester?
  stakeholders Json
  approver Json
  information Information?
  budget Budget?
  status Json
  active Boolean
}

model Training_Survey {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  idform String @unique
  name String
  datesubmiss String
  requester_id String @unique
  requester Requester?
  approver Json
  information Information?
  survey Survey?
  approverfeedback approverfeedback?
  status Json
  active Boolean
}

model WorkFlow {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  id_form String @unique
  nameform String
  approver Json
}

model RoleBased {
  id String   @id @default(auto()) @map("_id") @db.ObjectId
  namerole String
  member Json 
}

//--------------------type--------------------

//Training_Form
type Apply {
  employee_id String
  name String
  position String
  rank String
}

type Information {
  course String
  location String
  datestart String
  dateend String
  objective String
}

type Budget {
  received Float
  remaining Float
  registration Float
  room Float
  transportation Float
  allowance Float
  other Float
  total Float
}

//Training_Survey
type Survey {
  keycontent String
  matchesobjectives String
  remaining String
  course_result String
  course_reason String
  lecturer_result String
  lecturer_reason String
  document_result String
  document_reason String
  service_result String
  service_reason String
  selectedOptions String[]
}

type approverfeedback{
  objective String
  costEffectiveness String
  workBenefit String
  objectiveAlignment String
  futureRecommendation String
  reasonfutureRecommendation String
  additionalcomments String
}

//WorkFlow
type Requester {
  employee_id String 
  name String
  position String
  rank String
  statusnoti String
  textnoti String
}

//****************************************************************************